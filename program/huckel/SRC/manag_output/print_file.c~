#include "../defMacro.h"

////////////////////////////////////
// Print the header of the program //
////////////////////////////////////



void print_header_file_xyz(char *file_name,SYS_XYZ sys) {
 
  FILE *f;

  f = fopen(file_name,"w");
  if (!f) 
  {
      printf("can't create %s \n",file_name);
      exit(1);
  }
  fprintf(f,"\n====  ===============================  ====\n");    
  fprintf(f,"====                                   ====\n");   
  fprintf(f,"====  	    Husky.1	       ====\n"); 
  fprintf(f,"====                                   ====\n");   
  fprintf(f,"====  ===============================  ====\n\n");
  
  fprintf(f," == Job Type required		\t: %s\n",sys.jobtype);
  fprintf(f," == Coordinates of the molecule    \t: %s\n",sys.pos);
  
  if(!strcmp(sys.jobtype,"junction"))
  fprintf(f," == Coordinate of the cluster	\t: %s\n",sys.cluster);
  
  if(!strcmp(sys.jobtype,"stm") || !strcmp(sys.jobtype,"stm_map") )
  {
  fprintf(f," == Coordinate of the surface	\t: %s\n",sys.surface);
  fprintf(f," == Coordinate of the tip   	\t: %s\n",sys.tip);
  }
  
  if(!strcmp(sys.jobtype,"junction") || !strcmp(sys.jobtype,"stm"))
  {
  fprintf(f," == Parameter for the T(E) calculation \n");
  fprintf(f," \t Minimal incident energy        \t: %f\n",sys.min_nrj);
  fprintf(f," \t Maximal incident energy        \t: %f\n",sys.max_nrj);
  fprintf(f," \t Number of incident energy      \t: %d\n",sys.nb_nrj);
  fprintf(f," \t Fermi Energy			\t: %lf\n",sys.Ef);
  }
  
  if(!strcmp(sys.jobtype,"stm_map"))
  {
  fprintf(f," == Parameter for the map calculation \n");
  fprintf(f," \t stm mode 			\t: %s %lf\n",sys.stm_mode,sys.stm_const);
  fprintf(f," \t size of the map (Angstrom)	\t: X = %lf\tY = %lf\n",sys.stm_size_map[0],sys.stm_size_map[1]);  
  fprintf(f," \t number of point per direction	\t: X = %d\tY = %d\n",sys.stm_resol_map[0],sys.stm_resol_map[1]);
  fprintf(f," \t Fermi Energy			\t: %lf\n",sys.Ef);
  fprintf(f," \t Applied bias voltage		\t: &lf\n",sys.stm_bias);
  fprintf(f," \t resolution for T(E)		\t: %d\n",sys.nb_nrj);
  }
  
  fprintf(f," == Export transmission            \t: %s\n",sys.export_TE);
  fprintf(f," == Export molecular orbitals      \t: %s\n",sys.export_MO);
  fprintf(f," == Export Current               \t: %s\n",sys.export_current);
  fclose(f);
}





