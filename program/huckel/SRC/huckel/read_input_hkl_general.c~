#include "../defMacro.h"
#include "./header.h"


void read_molecule_input_file(char *file_name, atom **MOL, int *no_atoms, int **ind_mol, int *no_atm_mol,
			    int **ind_elec_1, int *no_atm_elec1, int **ind_elec_2, int *no_atm_elec2 )
{
  
  
  int i,j,k,l;
  int INT;
  int INT2;
  float X,Y,Z;
  
  int read_mol;
  int current_elec;
  int read_elec[2];
  
  int no_atom_tot=-1;
  int nb_atom_tot_read=0;
  
  int no_atom_mol=-1;
  int no_atom_mol_read=0;
  
  int *no_atom_elec;
  no_atom_elec = calloc(2,sizeof(int));
  no_atom_elec[0]  = -1;
  no_atom_elec[1]  = -1;
  
  int *no_atom_elec_read;
  no_atom_elec_read = calloc(2,sizeof(int));
  no_atom_elec_read[0]  = 0;
  no_atom_elec_read[1]  = 0;
  
  char *line=(char *)malloc(MAXCOL*sizeof(char));
  char *key;
  
  
  atom *MOL_TEMP=NULL;
  atom *MORE_MOL;
  
  char str_cmt[5];
  char str[100];
  char str_out[100];
  
  
  int *index_mol=NULL;
  int *index_elec_1=NULL;
  int *index_elec_2=NULL;
  
  int *more_index_mol;
  int *more_index_elec_1;
  int *more_index_elec_2;
  
  char buf[20];
  int index_check;
  
  FILE *f;
  
  
  // check if the file exists
   f = fopen(file_name,"r");
   if (!f) {
      printf("couldn't read input file %s\n", file_name);
      exit(1);
   }
   
   //////////////////////////////////////////
   // for all lines of the input file
   //////////////////////////////////////////
   while (!feof(f))
   //while(fgets(str,20,f) != NULL)
   {
     
        ///////////////////////
	// read the string
	///////////////////////
	fscanf(f,"%s",str);
	

	
	////////////////////////
	// if it's a comment
	////////////////////////
	strncpy(str_cmt,str,2);
	str_cmt[2] = '\0';
	if (!strcmp(str_cmt,"//"))
	  fgets(str,100,f);
	
	///////////////////////////
	// if it's not a comment
	///////////////////////////
	else
	{
	  
 ////////////////////////////////////////////////////////////////////////////////
 //				GENERAL INFORMATIONS
 ////////////////////////////////////////////////////////////////////////////////
 
	    ////////////////////////
	    // total number of atoms
	    ///////////////////////    
	    if( !strcmp(str,"nb_atom_tot") || !strcmp(str,"NB_ATOM_TOT")   || 
		 !strcmp(str,"nb_atom")  || !strcmp(str,"NB_ATOM")  ) 
	    {
		  fscanf(f,"%d",&no_atom_tot);		  
		  MOL_TEMP = calloc(no_atom_tot,sizeof(atom));
	    }  
		  
	    ////////////////////////
	    // total number electrode
	    ///////////////////////    
	    else  if( !strcmp(str,"nb_atom_elec") || !strcmp(str,"NB_ATOM_ELECTRODE")   || 
		!strcmp(str,"nb_atom_elec")  || !strcmp(str,"NB_ATOM_ELEC")  )
	     {
		  fscanf(f,"%d %d",&INT,&INT2);	
		  if(INT>2)
		    printf("Only two electrodes are possible, check file %s",file_name);
		  no_atom_elec[INT-1]=INT2;
		  if(INT == 1)
		    index_elec_1 = calloc(no_atom_elec[INT-1],sizeof(int));
		  if(INT == 2)
		    index_elec_2 = calloc(no_atom_elec[INT-1],sizeof(int));
	     }
	     
	     ////////////////////////
	    // nb atom molecule
	    ///////////////////////    
	     else if( !strcmp(str,"nb_atom_molecule") || !strcmp(str,"NB_ATOM_MOLECULE")   || 
		!strcmp(str,"nb_atom_mol")  || !strcmp(str,"NB_ATOM_MOL")  )
	     {
		  fscanf(f,"%d",&no_atom_mol);	
		  index_mol=calloc(no_atom_mol,sizeof(int));
	     }
            
	     
 ////////////////////////////////////////////////////////////////////////////////
 //				WHICH POSITIONS ARE WE READING
 ///////////////////////////////////////////////////////////////////////////////	
		  
	    ////////////////////////
	    // electrode
	    ///////////////////////    
	     else if( !strcmp(str,"electrode") || !strcmp(str,"ELECTRODE")   || 
		!strcmp(str,"elec")  || !strcmp(str,"ELEC")  )
	     {
		   // read the current elec
		  fscanf(f,"%d",&current_elec);	  

		  // reinit the value of read_X
		  for(i=0;i<2;i++)
		    read_elec[i] = 0;
		  read_mol = 0;
		  
		  // init value of read_elec(current)
		  read_elec[current_elec-1]  = 1;


	     }
	     
	    ////////////////////////
	    // molecule
	    ///////////////////////    
	     else if( !strcmp(str,"molecule") || !strcmp(str,"MOLECULE")   || 
		!strcmp(str,"mol")  || !strcmp(str,"MOL")  )
	     {
		  for(i=0;i<2;i++)
		    read_elec[i] = 0;
		  read_mol = 1;
	     }
	     
 ////////////////////////////////////////////////////////////////////////////////
 //			READING POSITIONS
 ///////////////////////////////////////////////////////////////////////////////
            
	    else
	    {

	       index_check = findIndex(str);
	       if (index_check > 0)
	       {
		
		// read the data
		fscanf(f,"%f%f%f",&X,&Y,&Z);
		
		// realloc the memory if not dine previously
		if(no_atom_tot == -1 || nb_atom_tot_read >= no_atom_tot)
		{
		  MORE_MOL = realloc(MOL_TEMP,(nb_atom_tot_read+1)*sizeof(atom));
		  MOL_TEMP = MORE_MOL;
		}
		
		// store the data
		strcpy(MOL_TEMP[nb_atom_tot_read].atomTypeChar,str);
		MOL_TEMP[nb_atom_tot_read].atomtype = index_check;
		MOL_TEMP[nb_atom_tot_read].x=X;
		MOL_TEMP[nb_atom_tot_read].y=Y;
		MOL_TEMP[nb_atom_tot_read].z=Z;
		
		//printf("%s\t%d\t%f\t%f\t%f\n",MOL_TEMP[nb_atom_tot_read].atomTypeChar,MOL_TEMP[nb_atom_tot_read].atomtype
		// ,MOL_TEMP[nb_atom_tot_read].x,MOL_TEMP[nb_atom_tot_read].y,MOL_TEMP[nb_atom_tot_read].z);
		
		// update the #of atoms and their indexes of the molecule
		if(read_mol)
		{
		  
		  // realloc the indexes if not done previously
		  if(no_atom_mol==-1 || no_atom_mol_read >=no_atom_mol)
		  {
		    more_index_mol = realloc(index_mol,(no_atom_mol_read+1) * sizeof(int));
		    index_mol = more_index_mol;
		  }
		  
		  // store the index
		    index_mol[no_atom_mol_read] = nb_atom_tot_read;
		    
		    
		  // one more atom in the molecule
		  no_atom_mol_read ++;
		}
		
		
		// update the #of atoms and their indexes of the first electrode
		if(read_elec[0])
		{
		  
		  // realloc the indexes if not done previously
		  if(no_atom_elec[0]==-1 || no_atom_elec_read[0]>= no_atom_elec[0])
		  {
		    more_index_elec_1 = realloc( index_elec_1,(no_atom_elec_read[0]+1)*sizeof(int));
		    index_elec_1 = more_index_elec_1;
		  }
		  
		  // store the index
		    index_elec_1[ no_atom_elec_read[0] ] = nb_atom_tot_read;
		    
		    
		  // one more atom in the first elec
		  no_atom_elec_read[0] ++;
		}
		
		// update the #of atoms and their indexes of the second electrode
		if(read_elec[1])
		{
		  
		  // realloc the indexes if not done previously
		  if(no_atom_elec[1]==-1 || no_atom_elec_read[0]>= no_atom_elec[0])
		  {
		    more_index_elec_2 = realloc(index_elec_2,(no_atom_elec_read[1]+1)*sizeof(int));
		    index_elec_2 = more_index_elec_2;
		  }
		  
		  // store the index
		    index_elec_2[ no_atom_elec_read[1] ] = nb_atom_tot_read;
		    
		    
		  // one more atom in the secon elec
		  no_atom_elec_read[1] ++;
		}
			
		// one more atom read!
		nb_atom_tot_read ++;
		
	     }
	  }  
		  
	}	  
      	    
    }

      // export the data
      *MOL = MOL_TEMP;
      *ind_mol = index_mol;
      *ind_elec_1 = index_elec_1;
      *ind_elec_2 = index_elec_2;
      *no_atoms = nb_atom_tot_read;
      *no_atm_mol = no_atom_mol_read;
      *no_atm_elec1 = no_atom_elec_read[0];
      *no_atm_elec2 = no_atom_elec_read[1];
      
      if(nb_atom_tot_read != no_atom_tot)
	printf("\nWarning: input claims there is %d atom in the system but %d have been found \n Please check %s\n",no_atom_tot,nb_atom_tot_read,file_name);
         
      if(no_atom_mol_read != no_atom_mol)
	printf("\nWarning: input claims there is %d atom in the molecule but %d have been found \n Please check %s\n",no_atom_mol,no_atom_mol_read,file_name);

      if( no_atom_elec_read[0]!= no_atom_elec[0])
	printf("\nWarning: input claims there is %d electrode 1 in the molecule but %d have been found \n Please check %s\n",no_atom_tot,nb_atom_tot_read,file_name);
      
       if( no_atom_elec_read[1]!= no_atom_elec[1])
	printf("\nWarning: input claims there is %d electrode 2 in the molecule but %d have been found \n Please check %s\n",no_atom_elec[1],no_atom_elec_read[1],file_name);
       
      // close the file
      fclose(f);

}


void compute_huckel_hamiltonian_general(double **Hout, double **Sout, int *sizeH, int *size_sys, atom **MOL,
				int **IND_ATOM_MOL, int *NO_ATOM_MOL, int **IND_ATOM_ELEC, int *NO_ATOM_ELEC,
				int **ORB_MOL, int *NORB_MOL, int **ORB_ELEC1, int *NORB_ELEC1,int **ORB_ELEC2, int *NORB_ELEC2,
				char *file_name,char *out_path,char *orb_elec)
{
	int ii,jj,i,j,k,atom_row,atom_col,noorb_i,noorb_j,indexi,indexj;
	double xrow,yrow,zrow,xcol,ycol,zcol,delx,dely,delz;
	double S[16][16],H[16][16]; 
	FILE *fin,*fouts,*fouth;
	double *H_temp, *S_temp;
	char *line=(char *)malloc(MAXCOL*sizeof(char));
	char *key;
	char  FULL_OUT_H[100];
	char  FULL_OUT_S[100];
	int *ind_mol, *ind_elec_1, *ind_elec_2;
	atom *molecule;
	int no_atm_mol,no_atm_elec1,no_atm_elec2;
	int z,zz;
	int *orb_mol = NULL, *orb_elec1 = NULL, *orb_elec2 = NULL;
	int *orb_mol_temp, *orb_elec1_temp, *orb_elec2_temp;
	int norb_mol=0,norb_elec1=0,norb_elec2=0,norb_tot = 0;;
	
	// By Ramesh
	int kk, kkk, flag;

/*****************READING PARAMETERS**************/

	read_atomic_parameters(orb_elec);


/************************************************/




/*****************READING POSITIONS**************/


	 read_molecule_input_file(file_name, &molecule, &no_atoms, &ind_mol, &no_atm_mol, 
			       &ind_elec_1, &no_atm_elec1, &ind_elec_2, &no_atm_elec2);
	

/************************************************/

  if(0)
  {
	   //check data
	printf("no_atoms=%d\n",no_atoms);
	for(i=0;i<no_atoms;i++)
	  printf("%s\t%d\t%f\t%f\t%f\n",molecule[i].atomTypeChar,molecule[i].atomtype
		  ,molecule[i].x,molecule[i].y,molecule[i].z);
	  
	  

      for(i=0;i<no_atm_elec1;i++)
	printf("%d ", ind_elec_1[i]);
      printf("\n");
      for(i=0;i<no_atm_mol;i++)
	printf("%d ", ind_mol[i]);
      printf("\n");

       for(i=0;i<no_atm_elec2;i++)
	printf("%d ", ind_elec_2[i]);  
       printf("\n");     
  }

/*****************CALCULATIONS*******************/

	indexi=0;

	for(i=0;i<no_atoms;i++)	
	{
		indexj=0;
		atom_row=molecule[i].atomtype;
		
		// derermine the # of orbitals
		noorb_i=0;		
		if(period[atom_row].orb[0].orb_of_e!=0) noorb_i=noorb_i+1;
		if(period[atom_row].orb[1].orb_of_e!=0) noorb_i=noorb_i+3;
		if(period[atom_row].orb[2].orb_of_e!=0) noorb_i=noorb_i+5;
		if(period[atom_row].orb[3].orb_of_e!=0) noorb_i=noorb_i+7;
		
		
		// determine to which bloc the atom belongs
		for(z=0;z<no_atm_mol;z++)	
		{
		  if(i-ind_mol[z]==0)
		  {
		    orb_mol_temp = realloc(orb_mol,(norb_mol+noorb_i)*sizeof(int));
		    orb_mol = orb_mol_temp;
		    for(zz=0;zz<noorb_i;zz++)
		       orb_mol[norb_mol+zz] = norb_tot+zz;
		    
		    norb_mol+=noorb_i;
		  }
		}
		
		for(z=0;z<no_atm_elec1;z++)	
		{
		  if(i-ind_elec_1[z]==0)
		  {
		    orb_elec1_temp = realloc(orb_elec1,(norb_elec1+noorb_i)*sizeof(int));
		    orb_elec1 = orb_elec1_temp;
		    for(zz=0;zz<noorb_i;zz++)
		      orb_elec1[norb_elec1+zz] = norb_tot+zz;
		    norb_elec1+=noorb_i;
		  }
		}
		
		for(z=0;z<no_atm_elec2;z++)	
		{
		  if(i-ind_elec_2[z]==0)
		  {
		    orb_elec2_temp = realloc(orb_elec2,(norb_elec2+noorb_i)*sizeof(int));
		    orb_elec2 = orb_elec2_temp;
		    for(zz=0;zz<noorb_i;zz++)
		      orb_elec2[norb_elec2+zz] = norb_tot+zz;
		    norb_elec2+=noorb_i;
		  }
		}
		  
		// increment the # oftotal orbitals  
		norb_tot += noorb_i;  		  
		
		for(j=0;j<no_atoms;j++)
		{
			
			delx=molecule[j].x-molecule[i].x;
			dely=molecule[j].y-molecule[i].y;
			delz=molecule[j].z-molecule[i].z;
			atom_col=molecule[j].atomtype;
			noorb_j=0;
			if(period[atom_col].orb[0].orb_of_e!=0) noorb_j=noorb_j+1;
			if(period[atom_col].orb[1].orb_of_e!=0) noorb_j=noorb_j+3;
			if(period[atom_col].orb[2].orb_of_e!=0) noorb_j=noorb_j+5;
			if(period[atom_col].orb[3].orb_of_e!=0) noorb_j=noorb_j+7;

			for(ii=0;ii<16;ii++)
			{
				for(jj=0;jj<16;jj++)
				{
					S[ii][jj]=0;
					H[ii][jj]=0;
				}
			}

			if(i==j)
			{
				for(ii=0;ii<16;ii++)
				{
					S[ii][ii]=1;
					if(ii==0) H[ii][ii]=period[atom_col].orb[0].VSIP;
					if((3>=ii)&&(ii>0)) H[ii][ii]=period[atom_col].orb[1].VSIP;
					if((8>=ii)&&(ii>3)) H[ii][ii]=period[atom_col].orb[2].VSIP;
					if((15>=ii)&&(ii>8)) H[ii][ii]=period[atom_col].orb[3].VSIP;
				}
			}
			else
			{
				overlap(atom_row,atom_col,delx,dely,delz,S,H);
			}


			for(ii=0;ii<noorb_i;ii++)
			{
				for(jj=0;jj<noorb_j;jj++)
				{
					smat[indexi+ii][indexj+jj]=S[ii][jj];
					hmat[indexi+ii][indexj+jj]=H[ii][jj];
				}	
			}

			indexj=indexj+noorb_j;

		}

		indexi=indexi+noorb_i;

	}

	no_orbitals=indexi;

/************************************************/

/*********************OUTPUT*********************/

	H_temp = calloc(no_orbitals*no_orbitals,sizeof(double));
	S_temp = calloc(no_orbitals*no_orbitals,sizeof(double));
	
/*********************OUTPUT*********************/
	
	  // path for the input files
	  strcpy(FULL_OUT_H,out_path);
	  strcat(FULL_OUT_H,"H.dat");
	  
	  // path for the input files
	  strcpy(FULL_OUT_S,out_path);
	  strcat(FULL_OUT_S,"S.dat");

	fouts=fopen(FULL_OUT_H,"w");
	fouth=fopen(FULL_OUT_S,"w");
	k = 0;
	for(i=0;i<no_orbitals;i++)
	{
		for(j=0;j<no_orbitals;j++)
		{
		  
			// print in file
			fprintf(fouts,"%5.4lf  ",smat[i][j]);
			fprintf(fouth,"%5.4lf  ",hmat[i][j]);
			
			//print in var
			H_temp[k] = hmat[i][j];
			S_temp[k] = smat[i][j];
			k++;
		}
	
		fprintf(fouts,"\n");
		fprintf(fouth,"\n");
	}
	
	fclose(fouts);
	fclose(fouth);
	
	
	// output variables
	*size_sys = no_atoms;
	*sizeH = no_orbitals;
	*Hout = H_temp;
	*Sout = S_temp;
	*ORB_MOL = orb_mol;
	*ORB_ELEC1 = orb_elec1;
	*ORB_ELEC2 = orb_elec2;
	*NORB_MOL = norb_mol;
	*NORB_ELEC1 = norb_elec1;
	*NORB_ELEC2 = norb_elec2;
        *MOL = molecule;
	*IND_ATOM_MOL = ind_mol;
	*NO_ATOM_MOL = no_atm_mol;
	*IND_ATOM_ELEC = ind_elec_1;
	*NO_ATOM_ELEC = no_atm_elec1;
/************************************************/


}


void extract_atom_mol(atom *mol_only,  int *ind_atom_mol, int no_atom_mol, atom *MOL)
{
  
  int i;
  for(i=0;i<no_atom_mol;i++)
  {
   	strcpy(mol_only[i].atomTypeChar,MOL[ind_atom_mol[i]].atomTypeChar);
	mol_only[i].atomtype = MOL[ind_atom_mol[i]].atomtype;
	mol_only[i].x = MOL[ind_atom_mol[i]].x;
	mol_only[i].y = MOL[ind_atom_mol[i]].y;
	mol_only[i].z = MOL[ind_atom_mol[i]].z; 
  }
  
}
